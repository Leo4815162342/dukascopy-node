import fs from 'fs';
import { promisify } from 'util';

import { instruments, InstrumentMetaData } from 'dukascopy-core';

const groupMap = [
  { group: 'Forex', subs: ['FX_CROSSES', 'FX_MAJORS', 'FX_METALS'] },
  { group: 'Commodities', subs: ['CMD_AGRICULTURAL', 'CMD_ENERGY', 'CMD_METALS'] },
  { group: 'Indicies (CFD)', subs: ['IDX_AMERICA', 'IDX_ASIA', 'IDX_EUROPE'] },
  { group: 'Bonds (CFD)', subs: ['BND_CFD'] },
  { group: 'Austria ðŸ‡¦ðŸ‡¹', subs: ['Austria'] },
  { group: 'Belgium ðŸ‡§ðŸ‡ª', subs: ['Belgium'] },
  { group: 'Denmark ðŸ‡©ðŸ‡°', subs: ['Denmark'] },
  { group: 'Finland ðŸ‡«ðŸ‡®', subs: ['Finland'] },
  { group: 'France ðŸ‡«ðŸ‡·', subs: ['France'] },
  { group: 'Germany ðŸ‡©ðŸ‡ª', subs: ['Germany'] },
  { group: 'Netherlands ðŸ‡³ðŸ‡±', subs: ['Netherlands'] },
  { group: 'Norway ðŸ‡³ðŸ‡´', subs: ['Norway'] },
  { group: 'Portugal ðŸ‡µðŸ‡¹', subs: ['Portugal'] },
  { group: 'Spain ðŸ‡ªðŸ‡¸', subs: ['Spain'] },
  { group: 'Sweden ðŸ‡¸ðŸ‡ª', subs: ['Sweden'] },
  { group: 'Switzerland ðŸ‡¨ðŸ‡­', subs: ['Switzerland'] },
  { group: 'United Kingdom ðŸ‡¬ðŸ‡§', subs: ['UK'] },
  { group: 'United States ðŸ‡ºðŸ‡¸', subs: ['US'] },
  { group: 'ETF (CFD)', subs: ['ETF_CFD_US'] },
  { group: 'Crypto', subs: ['VCCY'] }
];

const groups = Object.entries(instruments).reduce(
  (all, [id, instrument]) => {
    const idx = groupMap.findIndex(({ subs }) => subs.includes(instrument.group));

    all[idx].list.push({ ...instrument, id });

    return all;
  },
  groupMap.map(({ group }) => ({ group, list: [] as Array<InstrumentMetaData & { id: string }> }))
);

(async () => {
  try {
    const headers = [
      'Instrument id',
      'Instrument name',
      'Description',
      'Start date (tick, m1, h1)',
      'Start date (d1, mn1)'
    ];

    const header = headers.map((h, i) => `${!i ? '|' : ''}${h}|`).join('');
    const divider = headers.map((_, i) => `${!i ? '|' : ''}-|`).join('');

    const output = groups
      .map(({ group, list }) => {
        const groupTitle = `### ${group}`;

        const listBody = list
          .map(({ id, name, description, minStartDate, minStartDateDaily }) => {
            return `|\`${id}\`|${name}|${description}|${minStartDate}|${minStartDateDaily}|`;
          })
          .join('\n');

        return [groupTitle, header, divider, listBody].join('\n');
      })
      .join('\n');

    await promisify(fs.writeFile)('./INSTRUMENTS.md', output);
    console.log('Created file');
  } catch (err) {
    console.log(err);
  }
})();
